# Image I/O

import imageio

# Plots

import matplotlib.pyplot as pp

import matplotlib.patches as patches

# Image processing

from skimage import color, img_as_float, exposure, filters, measure

# Arrangement processing

import numpy as np

# Read image

charmander = imageio.imread('charmander.png')

# Convert image to float and gray

charmander_gray = color.rgb2gray(img_as_float(monty))

# Print shape and data type of images

print(f'\nRgb shape {charmander.shape}, size {len(charmander)} and type {charmander.dtype}\n')

print(
    f'Gray shape {charmander_gray.shape}, size {len(charmander_gray)} and type {charmander_gray.dtype}', end='\n' * 2
)

# Histogram equalization

charmander_hist = exposure.equalize_hist(charmander_gray)

# Image segmented and otsu threshold

otsu_threshold = filters.threshold_otsu(charmander_hist)

print(f'Otsu threshold {otsu_threshold}', end='\n\n')

# Select the objects using the mask
charmander_segmented = charmander_hist > otsu_threshold

# Get labels

charmander_label = measure.label(charmnader_segmented)

# Plot objects

fig, ax = pp.subplots(figsize=(10,6))

ax.imshow(charmander, cmap='gray') # charmander

ax.set_title('Charmander')

ax.axis('off')

for region in measure.regionprops(charmander_label):
    # Take large regions

    if region.area > 50:
        minr, minc, maxr, maxc = region.bbox

        rect = patches.Rectangle((minc, minr), maxc - minc, maxr - minr,
                                 fill=False, edgecolor='blue')

        ax.add_patch(rect)

pp.show()
